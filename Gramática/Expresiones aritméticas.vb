'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms;


Module MyParser
    Private Parser As New GOLD.Parser

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Whitespace] = 2                          ' Whitespace
        [Minus] = 3                               ' '-'
        [Lparen] = 4                              ' '('
        [Rparen] = 5                              ' ')'
        [Times] = 6                               ' '*'
        [Div] = 7                                 ' '/'
        [Semi] = 8                                ' ';'
        [Lbracket] = 9                            ' '['
        [Rbracket] = 10                           ' ']'
        [Plus] = 11                               ' '+'
        [Decimal] = 12                            ' DECIMAL
        [Entero] = 13                             ' ENTERO
        [Evaluar] = 14                            ' Evaluar
        [Expression] = 15                         ' <Expression>
        [Multexp] = 16                            ' <Mult Exp>
        [Negateexp] = 17                          ' <Negate Exp>
        [Statement] = 18                          ' <Statement>
        [Statements] = 19                         ' <Statements>
        [Value] = 20                              ' <Value>
    End Enum

    Private Enum ProductionIndex
        [Statements] = 0                          ' <Statements> ::= <Statement> <Statements>
        [Statements2] = 1                         ' <Statements> ::= <Statement>
        [Statement_Evaluar_Lbracket_Rbracket_Semi] = 2 ' <Statement> ::= Evaluar '[' <Expression> ']' ';'
        [Expression_Plus] = 3                     ' <Expression> ::= <Expression> '+' <Mult Exp>
        [Expression_Minus] = 4                    ' <Expression> ::= <Expression> '-' <Mult Exp>
        [Expression] = 5                          ' <Expression> ::= <Mult Exp>
        [Multexp_Times] = 6                       ' <Mult Exp> ::= <Mult Exp> '*' <Negate Exp>
        [Multexp_Div] = 7                         ' <Mult Exp> ::= <Mult Exp> '/' <Negate Exp>
        [Multexp] = 8                             ' <Mult Exp> ::= <Negate Exp>
        [Negateexp_Minus] = 9                     ' <Negate Exp> ::= '-' <Value>
        [Negateexp] = 10                          ' <Negate Exp> ::= <Value>
        [Value_Entero] = 11                       ' <Value> ::= ENTERO
        [Value_Decimal] = 12                      ' <Value> ::= DECIMAL
        [Value_Lparen_Rparen] = 13                ' <Value> ::= '(' <Expression> ')'
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.
        
        Parser.LoadTables(Path.Combine(Application.StartupPath, "grammar.egt"))
    End Sub
    
    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done as Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response              
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    .CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError 
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        With Reduction
            Select Case .Parent.TableIndex                        
                Case ProductionIndex.Statements                 
                    ' <Statements> ::= <Statement> <Statements> 

                Case ProductionIndex.Statements2                 
                    ' <Statements> ::= <Statement> 

                Case ProductionIndex.Statement_Evaluar_Lbracket_Rbracket_Semi                 
                    ' <Statement> ::= Evaluar '[' <Expression> ']' ';' 

                Case ProductionIndex.Expression_Plus                 
                    ' <Expression> ::= <Expression> '+' <Mult Exp> 

                Case ProductionIndex.Expression_Minus                 
                    ' <Expression> ::= <Expression> '-' <Mult Exp> 

                Case ProductionIndex.Expression                 
                    ' <Expression> ::= <Mult Exp> 

                Case ProductionIndex.Multexp_Times                 
                    ' <Mult Exp> ::= <Mult Exp> '*' <Negate Exp> 

                Case ProductionIndex.Multexp_Div                 
                    ' <Mult Exp> ::= <Mult Exp> '/' <Negate Exp> 

                Case ProductionIndex.Multexp                 
                    ' <Mult Exp> ::= <Negate Exp> 

                Case ProductionIndex.Negateexp_Minus                 
                    ' <Negate Exp> ::= '-' <Value> 

                Case ProductionIndex.Negateexp                 
                    ' <Negate Exp> ::= <Value> 

                Case ProductionIndex.Value_Entero                 
                    ' <Value> ::= ENTERO 

                Case ProductionIndex.Value_Decimal                 
                    ' <Value> ::= DECIMAL 

                Case ProductionIndex.Value_Lparen_Rparen                 
                    ' <Value> ::= '(' <Expression> ')' 

            End Select
        End With     

        Return Result
    End Function
End Module
